import React from 'react';
import { 
    Modal, 
    View, 
    Text, 
    TouchableOpacity, 
    ActivityIndicator, 
    StyleSheet, 
    ScrollView 
} from 'react-native';
import { Worker } from '../../types/admin';

interface Appointment {
    id: string;
    booking_date: string;
    time_slot: string;
    end_time: string;
    service_name: string;
    service_duration: number;
    customer_name: string;
    status: string;
}

interface ReallocationDialogProps {
    isOpen: boolean;
    setIsOpen: (open: boolean) => void;
    selectedAppointment: Appointment | null;
    workers: Worker[];
    confirmDialogOpen: boolean;
    setConfirmDialogOpen: (open: boolean) => void;
    reallocateLoading: boolean;
    confirmReallocate: (workerId: string) => void;
    executeReallocate: () => Promise<void>;
    currentWorkerId: string;
}

const ReallocationDialog: React.FC<ReallocationDialogProps> = ({
    isOpen,
    setIsOpen,
    selectedAppointment,
    workers,
    confirmDialogOpen,
    setConfirmDialogOpen,
    reallocateLoading,
    confirmReallocate,
    executeReallocate,
}) => {
    return (
        <Modal
            visible={isOpen}
            transparent
            animationType="slide"
            onRequestClose={() => setIsOpen(false)}
        >
            <View style={styles.overlay}>
                <View style={confirmDialogOpen ? styles.confirmDialog : styles.dialog}>
                    {reallocateLoading ? (
                        <ActivityIndicator size="large" color="#007aff" />
                    ) : (
                        <>
                            <Text style={styles.title}>Reallocate Appointment</Text>
                            <Text style={styles.description}>
                                Are you sure you want to reallocate this appointment?
                            </Text>
                            {selectedAppointment && (
                                <ScrollView style={styles.section}>
                                    <Text style={styles.sectionTitle}>Appointment Details</Text>
                                    <Text style={styles.details}>
                                        <Text style={styles.bold}>Service:</Text> {selectedAppointment.service_name}
                                    </Text>
                                    <Text style={styles.details}>
                                        <Text style={styles.bold}>Date:</Text> {selectedAppointment.booking_date}
                                    </Text>
                                    <Text style={styles.details}>
                                        <Text style={styles.bold}>Time:</Text> {selectedAppointment.time_slot} - {selectedAppointment.end_time}
                                    </Text>
                                    <Text style={styles.details}>
                                        <Text style={styles.bold}>Customer:</Text> {selectedAppointment.customer_name}
                                    </Text>
                                </ScrollView>
                            )}
                            <View style={styles.section}>
                                <Text style={styles.sectionTitle}>Available Workers</Text>
                                <View style={styles.workerList}>
                                    {workers.map((worker) => (
                                        <TouchableOpacity
                                            key={worker.id}
                                            onPress={() => confirmReallocate(worker.id)}
                                            disabled={!worker.is_active}
                                            style={[styles.workerButton, !worker.is_active && { opacity: 0.5 }]}
                                        >
                                            <Text>{worker.name}</Text>
                                            {worker.specialty && (
                                                <Text style={styles.specialty}>{worker.specialty}</Text>
                                            )}
                                        </TouchableOpacity>
                                    ))}
                                </View>
                            </View>
                            {confirmDialogOpen && (
                                <>
                                    <Button
                                        title="Confirm Reallocation"
                                        onPress={() => executeReallocate()}
                                        loading={reallocateLoading}
                                        disabled={!selectedAppointment}
                                    />
                                </>
                            )}
                            {!confirmDialogOpen && (
                                <>
                                    <View style={styles.footer}>
                                        <TouchableOpacity
                                            onPress={() => set
    );
};

const styles = StyleSheet.create({
    overlay: {
        flex: 1,
        backgroundColor: 'rgba(0,0,0,0.35)',
        justifyContent: 'center',
        alignItems: 'center',
    },
    dialog: {
        backgroundColor: '#fff',
        borderRadius: 12,
        padding: 20,
        width: '90%',
        maxWidth: 400,
        elevation: 4,
    },
    confirmDialog: {
        backgroundColor: '#fff',
        borderRadius: 12,
        padding: 20,
        width: '85%',
        maxWidth: 350,
        elevation: 4,
    },
    title: {
        fontSize: 18,
        fontWeight: '700',
        marginBottom: 8,
    },
    description: {
        fontSize: 14,
        color: '#555',
        marginBottom: 16,
    },
    section: {
        marginBottom: 16,
    },
    sectionTitle: {
        fontWeight: '600',
        marginBottom: 4,
    },
    details: {
        marginLeft: 8,
    },
    bold: {
        fontWeight: '600',
    },
    workerList: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        gap: 8,
    },
    workerButton: {
        backgroundColor: '#f3f3f3',
        borderRadius: 6,
        paddingVertical: 8,
        paddingHorizontal: 12,
        marginRight: 8,
        marginBottom: 8,
    },
    specialty: {
        fontSize: 12,
        color: '#888',
    },
    muted: {
        color: '#888',
        fontSize: 13,
        marginTop: 8,
    },
    footer: {
        flexDirection: 'row',
        justifyContent: 'flex-end',
        marginTop: 16,
        gap: 12,
    },
    actionButton: {
        borderRadius: 6,
        paddingVertical: 10,
        paddingHorizontal: 18,
        minWidth: 90,
        alignItems: 'center',
    },
    cancelButton: {
        backgroundColor: '#eee',
    },
    confirmButton: {
        backgroundColor: '#007aff',
    },
    cancelText: {
        color: '#333',
        fontWeight: '600',
    },
    confirmText: {
        color: '#fff',
        fontWeight: '600',
    },
});

export default ReallocationDialog;
